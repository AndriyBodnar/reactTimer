{"version":3,"sources":["assets/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","time","pause","step","width","startTimer","interval","setInterval","setState","clearInterval","pauseTimer","this","className","onClick","style","height","backgroundColor","transition","marginTop","Component","timerSettings","App","autostart","active","autoStart","defaultTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRA8DeA,E,4MA3DbC,MAAQ,CACNC,KAAM,GACNC,OAAO,EACPC,KAAM,IACNC,MAAO,I,EAGTC,WAAa,WACX,EAAKC,SAAWC,aAAY,WAC1B,EAAKC,SAAS,CAAEP,KAAM,EAAKD,MAAMC,KAAO,IAEpC,EAAKD,MAAMC,KAAO,IACpBQ,cAAc,EAAKH,UACnB,EAAKE,SAAS,CAAEN,OAAO,IACvB,EAAKM,SAAS,CAAEP,KAAM,QAEvB,EAAKD,MAAMG,MACd,EAAKK,SAAS,CAAEN,OAAO,K,EAGzBQ,WAAa,WACXD,cAAc,EAAKH,UACnB,EAAKE,SAAS,CAAEN,OAAO,K,kEAIvBS,KAAKN,e,+BAKG,IAAD,EACuBM,KAAKX,MAA3BC,EADD,EACCA,KAAMG,EADP,EACOA,MAAOF,EADd,EACcA,MACrB,OACE,6BACE,yBAAKU,UAAU,kBACb,sCAAYX,GACZ,yBAAKW,UAAU,mBACb,4BAAQC,QAASX,EAAQS,KAAKN,WAAaM,KAAKD,YAC7CR,EAAQ,QAAU,WAKzB,yBACEU,UAAU,WACVE,MAAO,CACLC,OAAQ,OACRC,gBAAiB,YACjBZ,MAAM,QAAD,OAAUH,EAAV,sBAA4BG,EAA5B,MACLa,WAAY,KACZC,UAAW,e,GApDHC,aCEdC,EACE,IADFA,EAEE,IAFFA,GAGO,EAHPA,GAII,EAkBKC,MAff,WAAgB,IACNpB,EAAkCmB,EAA5BjB,EAA4BiB,EAAtBE,EAAsBF,EAAXG,EAAWH,EAC1C,OACE,yBAAKR,UAAU,WACb,kBAAC,EAAD,CACEX,KAAMA,EACNE,KAAMA,EACNqB,UAAWF,EACXC,OAAQA,EACRE,YAAaxB,M,YCRDyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c2210c61.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    time: 30,\r\n    pause: true,\r\n    step: 1000,\r\n    width: 30,\r\n  };\r\n\r\n  startTimer = () => {\r\n    this.interval = setInterval(() => {\r\n      this.setState({ time: this.state.time - 1 });\r\n\r\n      if (this.state.time < 0) {\r\n        clearInterval(this.interval);\r\n        this.setState({ pause: true });\r\n        this.setState({ time: 30 });\r\n      }\r\n    }, this.state.step);\r\n    this.setState({ pause: false });\r\n  };\r\n\r\n  pauseTimer = () => {\r\n    clearInterval(this.interval);\r\n    this.setState({ pause: true });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.startTimer();\r\n  }\r\n\r\n \r\n\r\n  render() {\r\n    const { time, width, pause} = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"timer__wrapper\">\r\n          <h1>Timer: {time}</h1>\r\n          <div className=\"button__wrapper\">\r\n            <button onClick={pause ? this.startTimer : this.pauseTimer}>\r\n              {pause ? \"Start\" : \"Pause\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"lineTime\"\r\n          style={{\r\n            height: \"20px\",\r\n            backgroundColor: \"firebrick\",\r\n            width: `calc(${time} * (100% / ${width}))`,\r\n            transition: \"1s\",\r\n            marginTop: \"40px\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\n\nimport Timer from \"./assets/Timer\";\n\nconst timerSettings = {\n  time: 30000,\n  step: 1000,\n  autostart: true,\n  active: false,\n};\n\nfunction App() {\n  const { time, step, autostart, active } = timerSettings;\n  return (\n    <div className=\"wrapper\">\n      <Timer\n        time={time}\n        step={step}\n        autoStart={autostart}\n        active={active}\n        defaultTime={time}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"./reset.css\";\nimport \"./assets/style.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}